对于大多数应用来说都做了与spring整合，对于rabbitmq来说。也有与spring的整合。可能通过spring的官网找到spring-amqp项目下载。spring-amqp项目包括三个子项目：spring-amqp、spring-erlang、spring-rabbit.

下面来认识一下spring-amqp中的几个重要类；以spring-amqp-1.0.0.M3版本为例

1、Message: Spring AMQP定义的Message类是AMQP域模型中代表之一。Message类封装了body(消息BODY)和properties（消息属性） 。使得这个API看起来很简单。Message类定义如下：

Java代码收藏代码
publicclassMessage{

privatefinalMessagePropertiesmessageProperties;

privatefinalbyte[]body;


publicMessage(byte[]body,MessagePropertiesmessageProperties){
this.body=body;
this.messageProperties=messageProperties;
}


publicbyte[]getBody(){
returnthis.body;
}

publicMessagePropertiesgetMessageProperties(){
returnthis.messageProperties;
}


}


其中MessageProperties类中定义了例如messageId、timestamp、contentType等属性。这此属性可以扩展到用户通过setHeader(String key, Object value)方法来自定义“headers”。

2、Exchange

Exchange接口代表一个AMQP的Exchange，决定消息生产者发送消息。每个Exchange都包括一个特定的唯一名字的虚拟主机的代理和一些其他属性。



Java代码收藏代码
publicinterfaceExchange{

StringgetName();

StringgetType();

booleanisDurable();

booleanisAutoDelete();

MapgetArguments();

}


其中AbstractExchange类实现了Exchange类。而DirectExchange、TopicExchange、FanoutExchang、HeadersExchange四个类继承AbstractExchange。并重写了getType()类。根据各自相对应的Exchange类型。DirectExchange、TopicExchange、FanoutExchang、HeadersExchange分别对应的类型为direct,topic,fanout,headers.对应Exchange与routingkey的判定关系在前面的章节中已学习了！

3、Queue

Queue类是消息消费者接收消息中重要的一个组成部分。通过与Exchange判定来肯定消费者所接收的消息。伪代码如下：

Java代码收藏代码
publicclassQueue{
privatefinalStringname;
privatevolatilebooleandurable;
privatevolatilebooleanexclusive;
privatevolatilebooleanautoDelete;
privatevolatileMaparguments;
publicQueue(Stringname){
this.name=name;
}
//GettersandSettersomittedforbrevity


其中name表示队列的名称、durable表示持久性。true表示是。exclusive表示独占性。由于在AmqpTemplate中提供一个方法来得到唯一的队列。这个队列可能是一个”reply-to“地址或者其他信息，因此一般exclusive和autoDelete一般设定为true.

4、Binding

Bingding类通过多种构造参数来判定Exchange,Queue,routingkey;例如



Java代码收藏代码
Binding(Queuequeue,FanoutExchangeexchange)


Java代码收藏代码
Binding(Queuequeue,HeadersExchangeexchange,Maparguments) Java代码收藏代码
Binding(Queuequeue,DirectExchangeexchange) Java代码收藏代码
Binding(Queuequeue,DirectExchangeexchange,StringroutingKey) Java代码收藏代码
Binding(Queuequeue,TopicExchangeexchange,StringroutingKey)


5、AmqpTemplate

AmqpTemplate是用来发送消息的模板类

Java代码收藏代码
publicinterfaceAmqpTemplate{

//sendmethodsformessages

voidsend(Messagemessage)throwsAmqpException;

voidsend(StringroutingKey,Messagemessage)throwsAmqpException;

voidsend(Stringexchange,StringroutingKey,Messagemessage)throwsAmqpException;

//sendmethodswithconversion

voidconvertAndSend(Objectmessage)throwsAmqpException;

voidconvertAndSend(StringroutingKey,Objectmessage)throwsAmqpException;

voidconvertAndSend(Stringexchange,StringroutingKey,Objectmessage)throwsAmqpException;

voidconvertAndSend(Objectmessage,MessagePostProcessormessagePostProcessor)throwsAmqpException;

voidconvertAndSend(StringroutingKey,Objectmessage,MessagePostProcessormessagePostProcessor)throwsAmqpException;

voidconvertAndSend(Stringexchange,StringroutingKey,Objectmessage,MessagePostProcessormessagePostProcessor)throwsAmqpException;

//receivemethodsformessages

Messagereceive()throwsAmqpException;

Messagereceive(StringqueueName)throwsAmqpException;

//receivemethodswithconversion

ObjectreceiveAndConvert()throwsAmqpException;

ObjectreceiveAndConvert(StringqueueName)throwsAmqpException;

//sendandreceivemethodsformessages

MessagesendAndReceive(Messagemessage)throwsAmqpException;

MessagesendAndReceive(StringroutingKey,Messagemessage)throwsAmqpException;

MessagesendAndReceive(Stringexchange,StringroutingKey,Messagemessage)throwsAmqpException;

//sendandreceivemethodswithconversion

ObjectconvertSendAndReceive(Objectmessage)throwsAmqpException;

ObjectconvertSendAndReceive(StringroutingKey,Objectmessage)throwsAmqpException;

ObjectconvertSendAndReceive(Stringexchange,StringroutingKey,Objectmessage)throwsAmqpException;

}
6、AmqpAdmin和RabbitAdmin

用户配置Queue、Exchange、Binding的代理类。代理类会自动声明或创建这些配置信息。

下面这个类用于异步接收消息的处理类

7、MessageConverter 消息转换器类

8、SimpleMessageListenerContainer 监听消息容器类